var documenterSearchIndex = {"docs":
[{"location":"LearnedPrior/#Integrating-Photoacoustic-operations-with-automatic-differention-in-Flux.","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"In this tutorial, we will illustrate how to combine the operators of Photoacoustic.jl with the AD system used in Flux.jl. Our illustration will be a photoacoustic inverse problem where the observe data has been generated by a photoacoustic operator y = Ax. We want to solve this inverse problem in the least squares sense: mathrmargmin_x  Ax - y_2^2","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"In the framework of deep prior, we parameterize the unknown x as the output of an untrained neural network G_theta(z) and optimize over its learnable parameters. ","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"mathrmargmin_theta  AG_theta(z) - y_2^2","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"Here is the key: if we want to solve this variational problem we need to \"chain\" the derivatives of the learned network (derivatives come from Zygote AD system) with the derivate of the photoacoustic operator (hand derived in Photoacoustic.jl). In this tutorial we demonstrate how this is easily done with the ChainRules.jl framework. ","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"using PhotoAcoustic\nusing JUDI\nusing Flux\nusing ProgressMeter: Progress, next!\nusing MLDatasets\nusing PyPlot\nusing ChainRulesCore\nusing Statistics\nusing LinearAlgebra\nusing Images","category":"page"},{"location":"LearnedPrior/#Define-a-neural-network","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Define a neural network","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"struct UNet\n    layers::NamedTuple\nend","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"\"\"\"\nUser Facing API for UNet architecture.\n\"\"\"\nfunction UNet(channels=[32, 64, 128, 256])\n    return UNet((\n        # Encoding\n        conv1=Conv((3, 3), 1 => channels[1], stride=1, bias=false),\n        gnorm1=GroupNorm(channels[1], 4, swish),\n            \n        conv2=Conv((3, 3), channels[1] => channels[2], stride=2, bias=false),\n        gnorm2=GroupNorm(channels[2], 32, swish),\n            \n        conv3=Conv((3, 3), channels[2] => channels[3], stride=2, bias=false),\n        gnorm3=GroupNorm(channels[3], 32, swish),\n            \n        conv4=Conv((3, 3), channels[3] => channels[4], stride=2, bias=false),\n        gnorm4=GroupNorm(channels[4], 32, swish),\n            \n        # Decoding\n        tconv4=ConvTranspose((3, 3), channels[4] => channels[3], stride=2, bias=false),\n        tgnorm4=GroupNorm(channels[3], 32, swish),\n            \n        tconv3=ConvTranspose((3, 3), channels[3] + channels[3] => channels[2], pad=(0, -1, 0, -1), stride=2, bias=false),\n        tgnorm3=GroupNorm(channels[2], 32, swish),\n            \n        tconv2=ConvTranspose((3, 3), channels[2] + channels[2] => channels[1], pad=(0, -1, 0, -1), stride=2, bias=false),\n        tgnorm2=GroupNorm(channels[1], 32, swish),\n            \n        tconv1=ConvTranspose((3, 3), channels[1] + channels[1] => 1, stride=1, bias=false),\n    ))\nend\n\nFlux.@functor UNet","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"expand_dims(x::AbstractVecOrMat, dims::Int=2) = reshape(x, (ntuple(i -> 1, dims)..., size(x)...))\nexpand_dims_rev(x::AbstractVecOrMat, dims::Int=2) = reshape(x,  size(x)...,(ntuple(i -> 1, dims)...))","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"expand_dims_rev (generic function with 2 methods)","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"function (unet::UNet)(x)\n\n    # Encoder\n    h1 = unet.layers.conv1(x)\n    h1 = unet.layers.gnorm1(h1)\n    \n    h2 = unet.layers.conv2(h1)\n    h2 = unet.layers.gnorm2(h2)\n    \n    h3 = unet.layers.conv3(h2)\n    h3 = unet.layers.gnorm3(h3)\n    \n    h4 = unet.layers.conv4(h3)\n    h4 = unet.layers.gnorm4(h4)\n    \n    # Decoder\n    h = unet.layers.tconv4(h4)\n    h = unet.layers.tgnorm4(h)\n    \n    h = unet.layers.tconv3(cat(h, h3; dims=3))\n    h = unet.layers.tgnorm3(h)\n    \n    h = unet.layers.tconv2(cat(h, h2, dims=3))\n    h = unet.layers.tgnorm2(h)\n    \n    h = unet.layers.tconv1(cat(h, h1, dims=3))\nend","category":"page"},{"location":"LearnedPrior/#Define-photoacoustic-simulation","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Define photoacoustic simulation","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"# Set up model structure\nn = (68, 68)   # (x,y,z) or (x,z)\nd = (0.08f0, 0.08f0)\no = (0., 0.)\n\n# Constant water velocity [mm/microsec]\nv = 1.5*ones(Float32,n) \nm = (1f0 ./ v).^2\n\n# Setup model structure\nmodel = Model(n, d, o, m;)\n\n# Set up receiver geometry\nnxrec = 64\nxrec = range(0, stop=d[1]*(n[1]-1), length=nxrec)\nyrec = [0f0]\nzrec = range(0, stop=0, length=nxrec)\n\n# receiver sampling and recording time\ntime = 5.2333 #[microsec] \ndt = calculate_dt(model) / 2    \n\n# Set up receiver structure\nrecGeometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=1)\n\n# Setup operators\nopt = Options(dt_comp=dt)\nF = judiModeling(model; options=opt)\nA = judiPhoto(F, recGeometry;)","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"JUDI forward{Float32} propagator (z * x) -> (src * rec * time)","category":"page"},{"location":"LearnedPrior/#Get-model-x","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Get model x","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"xtrain, ytrain = MLDatasets.MNIST(:train)[:]\nx = judiPhotoSource(imresize(xtrain[:,:,1], (n[1], n[2])))","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"judiPhotoSource{Float32} with 1 sources","category":"page"},{"location":"LearnedPrior/#Make-observed-data","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Make observed data","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"y = A*x\nimshow(y.data[1];aspect=\"auto\")","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"Operator `photoacoustic_forward` ran in 0.08 s","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"(Image: png)","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"PyObject <matplotlib.image.AxesImage object at 0x19a96d190>","category":"page"},{"location":"LearnedPrior/#Add-rrule-for-chainfules-to-know-how-to-differentiate-the-photoacoustic-operator","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Add rrule for chainfules to know how to differentiate the photoacoustic operator","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"function ChainRulesCore.rrule(::typeof(*), A::T, x) where {T<:judiPhoto}\n    y = A*judiPhotoSource(x)\n    pullback(Δy) = (NoTangent(), NoTangent(), expand_dims_rev((A'*Δy).data[1]))\n    return y, pullback\nend\n","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"function model_loss(A, model, y, z)\n    norm(A*model(z) - y).^2\nend","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"model_loss (generic function with 1 method)","category":"page"},{"location":"LearnedPrior/#Training-Hyperparameters","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Training Hyperparameters","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"device = cpu          # only works on cpu right now\nlr = 5e-3             # learning rate\nepochs = 100           # number of epochs","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"100","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"for i in 28:64  \n    try unet(randn(Float32, i, i, 1, 1))\n    catch\n         println(\"error at $(i)\")\n    end\nend\n    \n    \n36\n44\n52\n60\n68\n76","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"error at 29\nerror at 30\nerror at 31\nerror at 32\nerror at 33\nerror at 34\nerror at 35\nerror at 37\nerror at 38\nerror at 39\nerror at 40\nerror at 41\nerror at 42\nerror at 43\nerror at 45\nerror at 46\nerror at 47\nerror at 48\nerror at 49\nerror at 50\nerror at 51\nerror at 53\nerror at 54\nerror at 55\nerror at 56\nerror at 57\nerror at 58\nerror at 59\nerror at 61\nerror at 62\nerror at 63\nerror at 64\n\n\n\n\n\n76","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"# initialize UNet model\nunet = UNet() |> device\n\n# initialize input to model. This is not a trainable parameter \nz = randn(Float32, n[1], n[1], 1, 1) |> device\n\n# ADAM optimizer\nopt = ADAM(lr)\n\n# trainable parameters\nps = Flux.params(unet);","category":"page"},{"location":"LearnedPrior/#Training","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Training","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"loss_log = []\nerror_log = []\nprogress = Progress(epochs)\n\nfor epoch = 1:epochs    \n    loss, grad = Flux.withgradient(ps) do\n        model_loss(A, unet, y, z)\n    end\n    Flux.Optimise.update!(opt, ps, grad)\n    \n    append!(loss_log, loss)\n    append!(error_log, norm(unet(z)[:,:,1,1]' - x.data[1][:,:,1,1]')^2)\n    \n    # progress meter\n    next!(progress; showvalues=[(:loss, loss)])\nend","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"┌ Warning: ProgressMeter by default refresh meters with additional information in IJulia via `IJulia.clear_output`, which clears all outputs in the cell. \n│  - To prevent this behaviour, do `ProgressMeter.ijulia_behavior(:append)`. \n│  - To disable this warning message, do `ProgressMeter.ijulia_behavior(:clear)`.\n└ @ ProgressMeter /Users/rafaelorozco/.julia/packages/ProgressMeter/sN2xr/src/ProgressMeter.jl:618\n\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:05:34\u001b[39m\r\n\u001b[34m  loss:  0.039336037\u001b[39m","category":"page"},{"location":"LearnedPrior/#Show-training-log","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Show training log","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"subplot(1,2,1); title(\"Least squares objective\")\nplot(loss_log; );\nsubplot(1,2,2);title(\"Error\")\nplot(error_log; );","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"(Image: png)","category":"page"},{"location":"LearnedPrior/#Plot-our-results","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Plot our results","text":"","category":"section"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"fig = figure(figsize=(8,4))\nsubplot(2,3,1); title(\"Ground truth x\")\nimshow(x.data[1][:,:,1,1]'; vmin=0,vmax = 1); colorbar()\nsubplot(2,3,2); title(\"Deep prior estimation G(z)\")\nimshow(unet(z)[:,:,1,1]'; vmin=0,vmax = 1); colorbar() \nsubplot(2,3,3); title(\"Error\")\nimshow(unet(z)[:,:,1,1]' - x.data[1][:,:,1,1]'; cmap = \"seismic\", vmin=-2, vmax = 2); colorbar()\n\nsubplot(2,3,4); title(\"Observed data y\")\nimshow(y.data[1];aspect=\"auto\"); colorbar()\nsubplot(2,3,5); title(\"Simulated data A*G(z)\")\nimshow((A*judiPhotoSource(unet(z))).data[1];aspect=\"auto\"); colorbar() \nsubplot(2,3,6); title(\"Data residual\")\nimshow((A*judiPhotoSource(unet(z))).data[1] - y.data[1];aspect=\"auto\",cmap = \"seismic\", vmin=-0.1, vmax = 0.1);  colorbar() \n\ntight_layout()","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"Operator `photoacoustic_forward` ran in 0.09 s\nOperator `photoacoustic_forward` ran in 0.09 s","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"(Image: png)","category":"page"},{"location":"LearnedPrior/","page":"Integrating Photoacoustic operations with automatic differention in Flux.","title":"Integrating Photoacoustic operations with automatic differention in Flux.","text":"","category":"page"},{"location":"#PhotoAcoustic.jl-documentation","page":"Home","title":"PhotoAcoustic.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of PhotoAcoustic.jl , a julia package for photoacoustic simulation and inversion integrable with Julia's AD ecosystem via ChainRules.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the moment, PhotoAcoustic.jl is in developement stage and isn't registered in the Julia General registry. To install PhotoAcoustic.jl run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add/dev https://github.com/slimgroup/PhotoAcoustic.jl","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [PhotoAcoustic]","category":"page"},{"location":"#PhotoAcoustic.judiInitialState-Union{Tuple{Array{Array{T, N}, 1}}, Tuple{N}, Tuple{T}} where {T<:Number, N}","page":"Home","title":"PhotoAcoustic.judiInitialState","text":"judiInitialState(field)\n\nConstruct an the initial pressure wavefield distributed across space for each experiments. This is a single-time intistate and assumes that the initial time derivative is zero to define the second time step of the second order wave equation. \n\nArguments\n\nsource: a (Vector of) 2D-3D array with spatial distribution of photoacoustic sources\n\n\n\n\n\n","category":"method"},{"location":"#PhotoAcoustic.judiInitialStateProjection-Tuple{Any}","page":"Home","title":"PhotoAcoustic.judiInitialStateProjection","text":"judiInitialStateProjection(model)\n\nConstruct the projection operator that sets the initial state into the wavefield for propagation. This operator is a No-op operation that will propagate a judiInitialState if combined with a JUDI propagator.\n\n\n\n\n\n","category":"method"},{"location":"#PhotoAcoustic.judiPhoto-Union{Tuple{O}, Tuple{D}, Tuple{JUDI.judiPropagator{D, O}, Geometry}} where {D, O}","page":"Home","title":"PhotoAcoustic.judiPhoto","text":"judiPhoto(F::judiPropagator, geometry::Geometry;)\n\nConstructs a photoacoustic linear operator solving the wave equation associated with F.model. The parametrizations currently supported through JUDI are isotropic acoustic (with or without density), acoustic anisotropic (TTI/VTI) and  visco-acoustic.\n\nArguments\n\nF: The base JUDI propagator (judiModeling) geometry: the receiver interpolation (judiProjection) for data measurment\n\n\n\n\n\n","category":"method"}]
}
